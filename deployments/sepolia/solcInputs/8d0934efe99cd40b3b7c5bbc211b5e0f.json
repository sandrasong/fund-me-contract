{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// pragma\npragma solidity ^0.8.8;\n// imports\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n// error codes\nerror FundMe__NotOwner();\n\n// Interfaces, Libraries, Contracts\n\n/** @title A contract for crowd funding\n *  @author Sandra\n *  @dev This implements price feeds as our library\n */\n\ncontract FundMe {\n  // Type declarations\n  using PriceConverter for uint256;\n\n  // State variables\n  mapping(address => uint256) private s_addressToAmountFunded;\n  address[] private s_funders;\n\n  address private immutable i_owner;\n  uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\n\n  AggregatorV3Interface private s_priceFeed;\n\n  modifier onlyOwner() {\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\n    _;\n  }\n\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  fallback() external payable {\n    fund();\n  }\n\n  receive() external payable {\n    fund();\n  }\n\n  function fund() public payable {\n    require(\n      msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n      \"You need to spend more ETH!\"\n    );\n    s_addressToAmountFunded[msg.sender] += msg.value;\n    s_funders.push(msg.sender);\n  }\n\n  function withdraw() public onlyOwner {\n    for (\n      uint256 funderIndex = 0;\n      funderIndex < s_funders.length;\n      funderIndex++\n    ) {\n      address funder = s_funders[funderIndex];\n      s_addressToAmountFunded[funder] = 0;\n    }\n    s_funders = new address[](0);\n\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"Call failed\");\n  }\n\n  function cheaperWithdraw() public payable onlyOwner {\n    address[] memory funders = s_funders;\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n      address funder = funders[funderIndex];\n      s_addressToAmountFunded[funder] = 0;\n    }\n    s_funders = new address[](0);\n    (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\"\");\n    require(callSuccess, \"Call failed\");\n  }\n\n  function getOwner() public view returns (address) {\n    return i_owner;\n  }\n\n  function getFunder(uint256 index) public view returns (address) {\n    return s_funders[index];\n  }\n\n  function getAddressToAmountFunded(\n    address funder\n  ) public view returns (uint256) {\n    return s_addressToAmountFunded[funder];\n  }\n\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\n    return s_priceFeed;\n  }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\n    // ETH/USD rate in 18 digit\n    return uint256(answer * 10000000000);\n    // or (Both will do the same thing)\n    // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\n  }\n\n  // 1000000000\n  function getConversionRate(\n    uint256 ethAmount,\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n    // or (Both will do the same thing)\n    // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\n    // the actual ETH/USD conversion rate, after adjusting the extra 0s.\n    return ethAmountInUsd;\n  }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}